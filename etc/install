#!/usr/bin/env ruby
# This script installs only to ~/.sol
# To install elsewhere you can just unzip
# https://github.com/laarc/sol/zipfile/master anywhere you like or
# change the value of SOL_PREFIX

def mac?
  /darwin/i === RUBY_PLATFORM
end

def linux?
  /linux/i === RUBY_PLATFORM
end

def freebsd?
  /freebsd/i === RUBY_PLATFORM
end

SOL_USRFIX = "~/.sol"
SOL_VARFIX = "$HOME/.sol"
SOL_PREFIX = "#{ENV['HOME']}/.sol"
REPOSITORY="https://github.com/laarc/sol"

Installing = Dir["#{SOL_PREFIX}/.git/*"].empty?
def updating?
  not Installing
end

module Tty extend self
  def blue; bold 34; end
  def white; bold 39; end
  def red; underline 31; end
  def reset; escape 0; end
  def bold n; escape "1;#{n}" end
  def underline n; escape "4;#{n}" end
  def escape n; "\033[#{n}m" if STDOUT.tty? end
end

class Array
  def shell_s
    cp = dup
    first = cp.shift
    cp.map{ |arg| arg.gsub " ", "\\ " }.unshift(first) * " "
  end
end

def ohai *args
  puts "\n"
  puts "==>#{Tty.blue} #{args.shell_s}#{Tty.reset}"
end

def warn warning
  puts "#{Tty.red}Warning#{Tty.reset}: #{warning.chomp}"
end

def system *args
  abort "Failed during: #{args.shell_s}" unless Kernel.system(*args)
end

def run *args
  if ENV["VERBOSE"] then
    ohai *args
  end
  Kernel.system(*args)
end

def which prog
  `which #{shellquote prog}`.gsub(/[\r\n]/, "")
end

def sudo *args
  sudo = which "sudo"
  ohai sudo, *args
  system sudo, *args
end

def getc  # NOTE only tested on OS X
  system "/bin/stty raw -echo"
  if STDIN.respond_to?(:getbyte)
    STDIN.getbyte
  else
    STDIN.getc
  end
ensure
  system "/bin/stty -raw echo"
end

def wait_for_user *args
  if args[0] != nil
    ohai args[0]
  else
    ohai "Press RETURN to continue or any other key to abort"
  end
  c = getc
  c = c.chr
  # we test for \r and \n because some stuff does \r instead
  c = "\n" if c == "\r"
  c
end

module Version
  def <=>(other)
    split(".").map { |i| i.to_i } <=> other.split(".").map { |i| i.to_i }
  end
end

def macos_version
  @macos_version ||= '10.8' unless mac?
  @macos_version ||= `/usr/bin/sw_vers -productVersion`.chomp[/10\.\d+/].extend(Version)
end

def git
  @git ||= if ENV['GIT'] and File.executable? ENV['GIT']
    ENV['GIT']
  elsif Kernel.system '/usr/bin/which git >/dev/null'
    'git'
  else
    exe = `xcrun -find git 2>/dev/null`.chomp
    exe if $? && $?.success? && !exe.empty? && File.executable?(exe)
  end

  return unless @git
  # Github only supports HTTPS fetches on 1.7.10 or later:
  # https://help.github.com/articles/https-cloning-errors
  `#{@git} --version` =~ /git version (\d\.\d+\.\d+)/
  return if $1.nil? or $1.extend(Version) < "1.7.10"

  @git
end

def shellquote s
    "'" + s.gsub("'", "'\\''") + "'"
end

# Invalidate sudo timestamp before exiting
at_exit { Kernel.system which("sudo"), "-k" }

# The block form of Dir.chdir fails later if Dir.CWD doesn't exist which I
# guess is fair enough. Also sudo prints a warning message for no good reason
Dir.chdir "/usr"

####################################################################### script
abort "Don't run this as root!" if Process.uid == 0
# abort <<-EOABORT unless Dir["#{SOL_PREFIX}/.git/*"].empty?
# It appears Parasol is already installed. If your intent is to reinstall you
# should do the following before running this installer again:
#     rm -rf #{SOL_USRFIX}
# EOABORT
# Tests will fail if the prefix exists, but we don't have execution
# permissions. Abort in this case.
abort <<-EOABORT if File.directory? SOL_PREFIX and not File.executable? SOL_PREFIX
The Parasol prefix, #{SOL_USRFIX}, exists but is not searchable. If this is
not intentional, please restore the default permissions and try running the
installer again:
    sudo chmod 775 #{SOL_USRFIX}
EOABORT

if updating? then
  ohai "Updating Parasol at #{SOL_USRFIX}"
else
  ohai "This script will install Parasol to #{SOL_USRFIX}"
end
puts "  #{SOL_PREFIX}/bin/sol"
puts "  #{SOL_PREFIX}/lib/..."

chmods = %w( . bin etc include lib lib/pkgconfig sbin share var var/log share/locale share/man
             share/man/man1 share/man/man2 share/man/man3 share/man/man4
             share/man/man5 share/man/man6 share/man/man7 share/man/man8
             share/info share/doc share/aclocal ).
            map{ |d| "#{SOL_PREFIX}/#{d}" }.
            select{ |d| File.directory? d and (not File.readable? d or not File.writable? d or not File.executable? d) }
chgrps = chmods.reject{ |d| File.stat(d).grpowned? }
if freebsd?
  group = "freebsd"
else
  group = "admin"
end

unless chmods.empty?
  ohai "The following directories will be made group writable:"
  puts(*chmods)
end
unless chgrps.empty?
  ohai "The following directories will have their group set to #{Tty.underline 39}admin#{Tty.reset}:"
  puts(*chgrps)
end

unless updating? then
  if STDIN.tty?
    abort unless wait_for_user == "\n"
  end
end

if linux?
  system "/bin/mkdir", "-p", SOL_PREFIX
elsif File.directory? SOL_PREFIX
  system "/bin/chmod", "g+rwx", *chmods unless chmods.empty?
  system "/usr/bin/chgrp", "admin", *chgrps unless chgrps.empty?
else
  system "/bin/mkdir", SOL_PREFIX
  system "/bin/chmod", "g+rwx", SOL_PREFIX
  # the group is set to wheel by default for some reason
  if mac?
    system "/usr/bin/chgrp", "admin", SOL_PREFIX
  end
end

if macos_version >= "10.9"
  developer_dir = `/usr/bin/xcode-select -print-path 2>/dev/null`.chomp
  if developer_dir.empty? || !File.exist?("#{developer_dir}/usr/bin/git")
    ohai "Installing the Command Line Tools (expect a GUI popup):"
    sudo "/usr/bin/xcode-select", "--install"
    puts "Press any key when the installation has completed."
    getc
  end
end
if macos_version < "10.9" && macos_version > "10.6"
  `/usr/bin/cc --version 2> /dev/null` =~ %r[clang-(\d{2,})]
  version = $1.to_i
  puts "Install the #{Tty.white}Command Line Tools for Xcode#{Tty.reset}: https://developer.apple.com/downloads" if mac? && version < 425
else
  puts "Install #{Tty.white}Xcode#{Tty.reset}: https://developer.apple.com/xcode" unless File.exist? "/usr/bin/cc"
end

if updating? then
  ohai "Updating #{SOL_USRFIX} ..."
else
  ohai "Fetching #{REPOSITORY} ..."
end
Dir.chdir SOL_PREFIX do
  if git
    # we do it in four steps to avoid merge errors when reinstalling
    run git, "init", "-q"
    run git, "remote", "remove", "origin"
    run git, "remote", "add", "origin", REPOSITORY

    args = git, "fetch", "origin", "master:refs/remotes/origin/master", "-n"
    args << "--depth=1" if ARGV.include? "--fast"
    system(*args)

    system git, "reset", "--hard", "origin/master"
  else
    # -m to stop tar erroring out if it can't modify the mtime for root owned directories
    # pipefail to cause the exit status from curl to propogate if it fails
    # we use -k for curl because Leopard has a bunch of bad SSL certificates
    curl_flags = "fsSL"
    curl_flags << "k" if macos_version <= "10.5"
    system "/bin/bash -o pipefail -c '#{which "curl"} -#{curl_flags} #{REPOSITORY}/tarball/master | tar xz -m --strip 1'"
  end
end

InPath = ENV['PATH'].split(':').include? "#{SOL_PREFIX}/bin"
def in_path?
  InPath
end

# ohai "Installation successful"

if freebsd?
  libs = "sudo pkg install luajit rlwrap" 
elsif linux?
  if which "apt-get"
    libs = "sudo apt-get install build-essential luajit luajit-devel rlwrap" if linux?
  else
    libs = <<-end
sudo yum groupinstall 'Development Tools'
sudo yum install luajit luajit-devel rlwrap
    end
  end
elsif mac?
  libs = "brew install luajit rlwrap"
end

# ohai "Next steps"
puts
ohai "Install the dependencies:"
puts

# #{Tty.white}OS X:#{Tty.reset}
puts <<-EOS
  #{libs}
EOS

if STDIN.tty?
  unless ["N", "n"].include? wait_for_user "Want me to install those packages for you? (Y/n): "
    ohai libs
    system libs
  end
end

shell = "#{ENV['SHELL']}"
shell = shell.split("/")[-1] if shell
if shell == "tcsh"
  profile = "~/.cshrc"
elsif File.exist? "~/.profile"
  profile = "~/.profile"
else
  profile = "~/.bash_profile"
end
puts

unless in_path?
  ohai "Add #{SOL_USRFIX}/bin to your $PATH"
  #warn "#{SOL_USRFIX}/bin is not in your PATH."
  puts <<-end
  To add #{SOL_USRFIX}/bin to your PATH, copy-paste the following lines:
  end
  puts
  exports = <<-end if mac?
    echo #{shellquote "export PATH=\"$PATH:#{SOL_VARFIX}/bin\""} >> #{profile}
  end
  exports = <<-end if linux?
    echo #{shellquote "export PATH=\"$PATH:#{SOL_VARFIX}/bin\""} >> #{profile}
  end
  exports = <<-end if freebsd?
    echo #{shellquote "export PATH=\"$PATH:#{SOL_VARFIX}/bin\""} >> ~/.profile
    echo #{shellquote "set path = ($path #{SOL_VARFIX.downcase}/bin)"} >> ~/.cshrc
  end
  puts "#{exports}"
  puts <<-end
    source #{profile}
  end
  puts
end

if STDIN.tty?
  unless in_path?
    # if ["Y", "y"].include? wait_for_user "Want me to add #{SOL_USRFIX}/bin to your PATH for you? (Y/n): "
    unless ["N", "n"].include? wait_for_user "Want me to add #{SOL_USRFIX}/bin to your PATH for you? (Y/n): "
      puts exports
      system exports
      # system ". #{profile}"
    end
  end
end

# fetch Lumen.
run "#{SOL_PREFIX}/bin/sol", "-e", ""

puts



def open_term
  if mac? then
    #
    # Credit to David Moles: http://stackoverflow.com/a/28373404
    #
    term = <<-'end'
  echo '
  on run argv
    if length of argv is equal to 0
      set command to ""
    else
      set command to item 1 of argv
    end if

    if length of argv is greater than 1
      set profile to item 2 of argv
      runWithProfile(command, profile)
    else
      runSimple(command)
    end if
  end run

  on runSimple(command)
    tell application "Terminal"
      activate
      set newTab to do script(command)
    end tell
    return newTab
  end runSimple

  on runWithProfile(command, profile)
    set newTab to runSimple(command)
    tell application "Terminal" to set current settings of newTab to (first settings set whose name is profile)
  end runWithProfile
  ' | osascript - "cat <""<'      ' > /dev/null


    Type \"sol\" to get a Lumen REPL.

    Type \"sol -h\" to see usage info.

    Tutorial: https://github.com/sctb/lumen 

      " > /dev/null
    end
    `#{term}`
  end
end

if updating? then
  puts 'Parasol updated.'
else
  puts 'Parasol installed.'
end
puts
if in_path? then
  puts 'Type `sol -h` for help or `sol` to get a REPL.'
else
  puts 'Open a new terminal window, then type `sol -h` for help, or `sol` to get a REPL.'
  open_term unless ENV["NOTERM"]
end
puts
puts 'Tutorial: https://github.com/sctb/lumen'
puts

